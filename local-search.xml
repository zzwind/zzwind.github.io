<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Nginx Brotli 压缩 TTFB时间高排查</title>
    <link href="/2020/04/17/Nginx-Brotli-%E5%8E%8B%E7%BC%A9-TTFB%E6%97%B6%E9%97%B4%E9%AB%98%E6%8E%92%E6%9F%A5/"/>
    <url>/2020/04/17/Nginx-Brotli-%E5%8E%8B%E7%BC%A9-TTFB%E6%97%B6%E9%97%B4%E9%AB%98%E6%8E%92%E6%9F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>因为内部系统的网络传输负载过高，决定使用 <code>Brotli</code> 压缩内容。</p><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><h3 id="PHP端"><a href="#PHP端" class="headerlink" title="PHP端"></a>PHP端</h3><p>安装brotli php扩展<br>配置：</p><pre><code class="bash">brotli.output_compression=1brotli.output_compression_level=9</code></pre><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>安装 <code>ngx_brotli</code> 模块 <a href="https://github.com/google/ngx_brotli" target="_blank" rel="noopener">ngx_brotli</a><br>配置：</p><pre><code class="bash">brotli on; brotli_comp_level 9; brotli_buffers 16 8k; brotli_min_length 20; brotli_types *; brotli_window 16m;</code></pre><p>重启nginx &amp;&amp; php-fpm</p><p>结果TTFB的时间一直为300ms+，原因是因为 <code>nginx</code> 配置里面的 <code>brotli_comp_level</code> 设为了 11 ，压缩等级太高导致nginx的CPU占用过高。而我自己一直在调整PHP端的 <code>brotli.output_compression_level</code> 压缩参数。导致nginx占用一直居高不下。 </p><p>顺便测试了一下 <code>Brotli</code> 的压缩等级1-11，11是完全没有必要的。9是最合适的压缩等级。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 添加证书 SSl</title>
    <link href="/2020/04/16/Nginx-%E6%B7%BB%E5%8A%A0%E8%AF%81%E4%B9%A6-SSl/"/>
    <url>/2020/04/16/Nginx-%E6%B7%BB%E5%8A%A0%E8%AF%81%E4%B9%A6-SSl/</url>
    
    <content type="html"><![CDATA[<h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><p>去各种证书生成的网站上生成证书并下载，放置服务器。</p><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><h3 id="加载证书"><a href="#加载证书" class="headerlink" title="加载证书"></a>加载证书</h3><pre><code>ssl on;ssl_certificate /usr/local/nginx-1.10/conf/xxxxxxx.pem; # 改为自己申请得到的 crt 文件的名称ssl_certificate_key /usr/local/nginx-1.10/conf/xxxxxxx.key; # 改为自己申请得到的 key 文件的名称ssl_session_cache shared:SSL:200m;ssl_session_tickets on;ssl_session_timeout 60m;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;</code></pre><h3 id="监听443端口"><a href="#监听443端口" class="headerlink" title="监听443端口"></a>监听443端口</h3><p>添加到nginx配置文件，80 443端口可共存。</p><pre><code>listen 80;listen 443 ssl http2;</code></pre><p>完成</p>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 添加模块</title>
    <link href="/2020/04/16/Nginx-%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97/"/>
    <url>/2020/04/16/Nginx-%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="在已经运行的Nginx添加其他模块"><a href="#在已经运行的Nginx添加其他模块" class="headerlink" title="在已经运行的Nginx添加其他模块"></a>在已经运行的Nginx添加其他模块</h2><h3 id="动态模块添加"><a href="#动态模块添加" class="headerlink" title="动态模块添加"></a>动态模块添加</h3><p>先查看已安装Nginx的编译参数:</p><pre><code class="bash">$ nginx -V</code></pre><p>进入Nginx源码包继续操作</p><pre><code class="bash">$ cd nginx-1.x.x$ ./configure --with-compat --add-dynamic-module=/path/to/ngx_brotli$ make modules</code></pre><p>执行结束以后 <code>ngx_http_brotli_filter_module.so</code>  <code>ngx_http_brotli_static_module.so</code> 两个模块会生成在 <code>ojbs</code> 目录里面，复制到 <code>/usr/lib/nginx/modules/</code> 后添加 <code>load_module</code> 在 <code>nginx.conf</code> 文件里。</p><h3 id="静态添加"><a href="#静态添加" class="headerlink" title="静态添加"></a>静态添加</h3><pre><code class="bash">$ cd nginx-1.x.x$ ./configure --add-module=/path/to/ngx_brotli$ make &amp;&amp; make install</code></pre><p>这样就会把模块直接编译进Nginx。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo安装 使用</title>
    <link href="/2020/04/10/hexo%E5%AE%89%E8%A3%85-%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/04/10/hexo%E5%AE%89%E8%A3%85-%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Hexo的安装和备份还原</p><a id="more"></a><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code class="bash">npm install hexo-cli -ghexo init blogcd blognpm installhexo server</code></pre><h3 id="备份Hexo配置文件"><a href="#备份Hexo配置文件" class="headerlink" title="备份Hexo配置文件"></a>备份Hexo配置文件</h3><p>把Hexo的配置文件和网站文件放在同一个Repositories，通过Branch区分<br>master分支用来放网站静态文件，hexo分支用来放网站的原始配置文件和数据。</p><pre><code class="bash">#初始化git init .#建立新分支hexogit checkout -b hexo#將檔案加入gitgit add .git commit -m &#39;Initial commit&#39;#加入遠端儲存庫位址git remote add origin https://github.com/username/username.github.io.git#將hexo分支推送至遠端儲存庫git push --set-upstream origin hexo</code></pre><p>以后只要隔一段时间提交一下本地配置文件到Github就可以做备份</p><h3 id="还原Hexo配置文件"><a href="#还原Hexo配置文件" class="headerlink" title="还原Hexo配置文件"></a>还原Hexo配置文件</h3><pre><code class="bash">git clone https://github.com/username/username.github.io.gitcd username.github.io/#切換到hexo分支git checkout hexo#依照package.json重新安裝hexo套件npm install#最後啟動hexo server看是不是可以正常瀏覽hexo server</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/04/09/hello-world/"/>
    <url>/2020/04/09/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
